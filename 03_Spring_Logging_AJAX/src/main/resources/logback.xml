<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<!-- 
			로깅(로그출력)을 하는 이유
			- 시스템 작동상태를 기록하거나 시스템 동작들을 분석하기 위해 기록해둘 필요가 있음
			- 사용자가 시스템을 이용하면서 발생되는 문제점(장애) 들을 기록해놔야 후에 유지보수할 수 있음
	 -->
	 
	 
	<!-- 
			<appender> : 전달된 로그를 어디에 어떤형식으로 출력할지 결정
			- 종류
				ㄴ ConsoleAppender			: 로그를 콘솔에 출력하기 위한 appender
				ㄴ JDBCAppender					:	로그를 RDB에 출력하기 위한 appender
				ㄴ FileAppender					: 로그를 파일에 출력하기 위한 appender
				ㄴ RollingFileAppender	: FileAppender를 보완한 개념
								ㄴ 일정 조건 후에 기존파일을 백업파일로 바꾸고 다시 새로운 파일로 로깅 시작
			- <encoder> + <pattern>
				로그를 어떤 패턴으로 출력할건지 형식 지정
				ㄴ %logger : 로거주체 (로그가 출력되는 클래스) => %logger{0} 으로 하면 클래스명 출력
				ㄴ %line	 : 로거발생 줄 수
				ㄴ %level	 : 로그레벨
				ㄴ %msg		 : 로그메세지
				ㄴ %date	 : yyyy-MM-dd HH:mm:ss:SSS 형식으로 로그출력 날짜
				ㄴ %date{포맷} : 포맷반영한 로그출력 날짜
	 -->
	<appender class="ch.qos.logback.core.ConsoleAppender" name="consoleLog">
		<encoder>
			<pattern>%-5level: [%date] [%logger:%line] - %msg%n</pattern>
		</encoder>
	</appender>
	
	<appender class="ch.qos.logback.core.FileAppender" name="fileLog">
		<file>/logs/ajax.log</file>
		<append>true</append>
		<immediateFlush>true</immediateFlush>
		<encoder>
			<pattern>%-5level: [%date] [%logger:%line] - %msg%n</pattern>
		</encoder>
	</appender>
	
	<!-- 특정 조건을 넘어서면 새로운 파일로 로깅 -->
	<appender class="ch.qos.logback.core.rolling.RollingFileAppender" name="rollingFileLog">
		<!-- rollingPlicy : 어떤 조건으로 파일을 생성 또는 사라지게 할건지 보관정책 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>/logs/ajax-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<maxFileSize>10MB</maxFileSize>
			<maxHistory>30</maxHistory>
			<totalSizeCap>10GB</totalSizeCap>
		</rollingPolicy>
		<encoder>
			<pattern>%-5level: [%date] [%logger:%line] - %msg%n</pattern>
		</encoder>
		
		
	</appender>
	
	
	
	<!-- 
			<root>
			- 현재 애플리케이션의 "모든 패키지 안"의 "특정 레벨 이상"의 로그를 특정 appender 적용시켜 출력
			- 로그 레벨 (아래로 갈수록 레벨이 높아짐)
				ㄴ TRACE	: 디버깅보다 상세한 정보 표현용
				ㄴ DEBUG	: 개발 단계에서 디버깅 용
				ㄴ INFO		: 정보성 메세지 기록용
				ㄴ WARN		: 처리 가능하나 향후 시스템 에러의 원인이 될 수 있는 경고성 메세지 기록용
				ㄴ ERROR	: 요청 처리 중 문제가 발생 기록용
				ㄴ FATAL	: 아주 심각한 시스템적인 문제 발생 기록용
			- 작성방법
				<root level="로그레벨(해당 레벨 이상의 로그만이 출력됨)">
					<appender-ref ref="로그를 출력시킬 appender 이름">
				</root>
				
			<logger>
			- "특정 패키지안"의 "특정 레벨 이상" 로그를 "특정 appender"에 적용시켜 출력
			- 작성방법
				<logger name="특정패키지" level="로그레벨" additivity="root logger로 전달여부(기본값 true)">
					<appender-ref ref="로그를 출력시킬 appender 이름" />
				</logger>
				
			기본적으로 logger 먼저 반영되고 root logger가 반영됨			
	 -->
	
	<!-- 1) root logger 만으로 모든 클래스 내의 로그 출력되도록 -->
	<!-- 
	<root level="DEBUG">
		<appender-ref ref="consoleLog" />
	</root>
	-->
	
	<!-- 2) logger 태그로 특정 패키지를 따로 레벨 지정 -->
	<!--
	<logger name="org.springframework" level="INFO">
		<appender-ref ref="consoleLog" />
		<appender-ref ref="fileLog" />
		<appender-ref ref="rollginFileLog" />
	</logger>
	
	<logger name="com.br.ajax" level="DEBUG">
		<appender-ref ref="consoleLog" />
		<appender-ref ref="fileLog" />
		<appender-ref ref="rollginFileLog" />
	</logger>
	 -->
	 
	 <!-- 3) root logger와 logger 함께 사용하기 -->
	<logger name="org.springframework" level="INFO"/>
	<logger name="com.br.ajax" level="DEBUG" />
	
	<root level="WARN"> <!-- 기본 로그 레벨은 WARN 설정 -->
		<appender-ref ref="consoleLog" />
		<appender-ref ref="fileLog" />
		<appender-ref ref="rollingFileLog" />
	</root>
	
	
	
	 
</configuration>