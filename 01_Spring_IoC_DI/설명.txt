## 스프링의 특징 1 ##

* IoC (Inversion of Control) : 제어역전
- 개발자가 프로그램을 제어하지 않고 Framework가 프로그램을 제어하는걸 의미
- 객체 생성 및 생명주기 관리, 의존관계 설정등을 개발자가 아닌 Framework가 직접 함

* IoC 컨테이너
- 위의 내용들을 전반적으로 관리하는 컨테이너로 
	개발에 필요한 객체들을 스프링이 관리하기 위해서는 해당 객체들을 먼저 빈(Bean)으로 등록해야됨
	이때 등록된 빈(== 객체)들을 가지고 있는 컨테이너 (IoC컨테이너 == 스프링 컨테이너 == 빈 컨테이너)

	컨테이너에 Bean을 등록하는 방법
	1) xml 방식		- Spring Bean Configuration File(xml)에 <bean> 태그로 등록
	2) java 방식 	- @Configuration 클래스에서 @Bean을 이용해서 등록
	
	등록된 Bean을 사용하는 방법 즉, 컨테이너로 부터 가져오는 방법
	1) 빈등록 구문이 쓰여져있는 xml파일 또는 java파일을 읽어들이면서 컨테이너 객체 생성
	2) 해당 컨테이너로 부터 getBean 메소드로 객체를 가져옴
	
----------------------------------------------------------------------------------------------------------

## 스프링 특징 2 ##

	
	DI (Dependency Injection) : 의존성 주입
	IoC와 연광되어 있는 기술로써 개발자가 직접 객체 생성하지 않고
	스프링 컨테이너가 관리하고 있는 Bean 객체를 자동으로 주입해주는 개념
	
	DI 어노테이션 종류
	@Inject			:	등록된 빈들 중 타입이 일치하는 빈 객체를 주입
									+ 이름으로 찾으려면 @Qualifier("이름")을 직접 명시해야됨
	@Resource		:	등록된 빈들 중 이름(id)이 일치하느 빈 객체를 주입
	@Autowired	:	등록된 빈들 중 타입이 일치하는 빈 객체를 주입
									+ 타입이 여러개일 경우 이름으로 자동으로 찾아줌(@Qualifier가 내장되어있음)
									
									
	@Autowired 사용방법
	1) 필드로 생성된 객체 주입
		 - 필드마다 매번 @Autowired 작성
	2) 생성자로 생성된 객체 주입 (얘를 많이씀 )
		 - 생성자의 매개변수 Bean 가져오기
		 - @Autowired 생략가능
	3) 메소드로 생성된 객체 주입
		 - 메소드의매개변수로 Bean 가져오기
		 - @Autowired 생략불가능
		 - 통상select메소드의 형태로 작성
		 
	------------------------------------------------------------------------------------------------------
	
	Ioc + DI 의 장점
	
	1) 메모리를 보다 효율적을 사용 가능
		 - 직접 new로 생서할 경우 매번 메모리역에 새로이 생성됨
		 	 자주 사용될 객체, 동시에 다수가 사용할 객체라면
		 	 그만큼의 객체가 생성되었다가 소멸됨을 반복함 => 메모리를 빈번하게 사용하게됨
		 => 스프링의 IoC와 DI 개념이 적용되면
		 		스프링 컨테이너가 해당 객체를 딱 한번만 생성해서 가지고 있을꺼임
		 		필요할때마다 해당 객체를 자동으로 주입해줌 (싱글톤 개념이 들어가있음)
		 		
	2) 클래스간의 결합도를 해소할 수 있음 (== 결합도를 낮출 수 있음)
		 
		 - 결합도가 높을때 발생되는 문제 => 특정 클래스 수정시
		 																		해당 클래스를 사용하고 있는 다른클래스도 수정해야됨
		 => IoC와 DI 개념이 적용되면 결합도가 낮아져서 소스코드의 수정을 최소화 할 수 있음
		 
		 번외) 응고결저(응집도는 높고 결합도는 낮게) 로 코딩할것